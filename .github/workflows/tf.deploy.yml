name: 'Terraform Deploy'

on:
  # push:
  #   branches: 
  #     - main
  #   paths-ignore:
  #       - .github/**
  #       - .gitignore


  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: Test
  cancel-in-progress: false

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: Test

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init --backend-config=config.azurerm.tfbackend
      env:
        #Connection Variables
        ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ vars.SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_ACTIONS_SECRET }}

      shell: bash

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check



      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      
      run: |
        terraform apply -auto-approve -input=false -var-file=vars.tfvars
        terraform output > output.json

      env:
        #Connection Variables
        ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ vars.SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_ACTIONS_SECRET }}